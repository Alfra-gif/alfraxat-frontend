{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { encode as base64url } from '../../runtime/base64url.js';\nimport encrypt from '../../runtime/encrypt.js';\nimport { deflate } from '../../runtime/zlib.js';\nimport generateIv from '../../lib/iv.js';\nimport encryptKeyManagement from '../../lib/encrypt_key_management.js';\nimport { JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport validateCrit from '../../lib/validate_crit.js';\nexport const unprotected = Symbol();\nexport class FlattenedEncrypt {\n  constructor(plaintext) {\n    if (!(plaintext instanceof Uint8Array)) {\n      throw new TypeError('plaintext must be an instance of Uint8Array');\n    }\n\n    this._plaintext = plaintext;\n  }\n\n  setKeyManagementParameters(parameters) {\n    if (this._keyManagementParameters) {\n      throw new TypeError('setKeyManagementParameters can only be called once');\n    }\n\n    this._keyManagementParameters = parameters;\n    return this;\n  }\n\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n\n  setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n    if (this._sharedUnprotectedHeader) {\n      throw new TypeError('setSharedUnprotectedHeader can only be called once');\n    }\n\n    this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n    return this;\n  }\n\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this._unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n\n    this._unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n\n  setAdditionalAuthenticatedData(aad) {\n    this._aad = aad;\n    return this;\n  }\n\n  setContentEncryptionKey(cek) {\n    if (this._cek) {\n      throw new TypeError('setContentEncryptionKey can only be called once');\n    }\n\n    this._cek = cek;\n    return this;\n  }\n\n  setInitializationVector(iv) {\n    if (this._iv) {\n      throw new TypeError('setInitializationVector can only be called once');\n    }\n\n    this._iv = iv;\n    return this;\n  }\n\n  encrypt(key, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this._protectedHeader && !_this._unprotectedHeader && !_this._sharedUnprotectedHeader) {\n        throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');\n      }\n\n      if (!isDisjoint(_this._protectedHeader, _this._unprotectedHeader, _this._sharedUnprotectedHeader)) {\n        throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n      }\n\n      const joseHeader = { ..._this._protectedHeader,\n        ..._this._unprotectedHeader,\n        ..._this._sharedUnprotectedHeader\n      };\n      validateCrit(JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, _this._protectedHeader, joseHeader);\n\n      if (joseHeader.zip !== undefined) {\n        if (!_this._protectedHeader || !_this._protectedHeader.zip) {\n          throw new JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n        }\n\n        if (joseHeader.zip !== 'DEF') {\n          throw new JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n        }\n      }\n\n      const {\n        alg,\n        enc\n      } = joseHeader;\n\n      if (typeof alg !== 'string' || !alg) {\n        throw new JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n      }\n\n      if (typeof enc !== 'string' || !enc) {\n        throw new JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n      }\n\n      let encryptedKey;\n\n      if (alg === 'dir') {\n        if (_this._cek) {\n          throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');\n        }\n      } else if (alg === 'ECDH-ES') {\n        if (_this._cek) {\n          throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');\n        }\n      }\n\n      let cek;\n      {\n        let parameters;\n        ({\n          cek,\n          encryptedKey,\n          parameters\n        } = yield encryptKeyManagement(alg, enc, key, _this._cek, _this._keyManagementParameters));\n\n        if (parameters) {\n          if (options && unprotected in options) {\n            if (!_this._unprotectedHeader) {\n              _this.setUnprotectedHeader(parameters);\n            } else {\n              _this._unprotectedHeader = { ..._this._unprotectedHeader,\n                ...parameters\n              };\n            }\n          } else {\n            if (!_this._protectedHeader) {\n              _this.setProtectedHeader(parameters);\n            } else {\n              _this._protectedHeader = { ..._this._protectedHeader,\n                ...parameters\n              };\n            }\n          }\n        }\n      }\n      _this._iv || (_this._iv = generateIv(enc));\n      let additionalData;\n      let protectedHeader;\n      let aadMember;\n\n      if (_this._protectedHeader) {\n        protectedHeader = encoder.encode(base64url(JSON.stringify(_this._protectedHeader)));\n      } else {\n        protectedHeader = encoder.encode('');\n      }\n\n      if (_this._aad) {\n        aadMember = base64url(_this._aad);\n        additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));\n      } else {\n        additionalData = protectedHeader;\n      }\n\n      let ciphertext;\n      let tag;\n\n      if (joseHeader.zip === 'DEF') {\n        const deflated = yield ((options === null || options === void 0 ? void 0 : options.deflateRaw) || deflate)(_this._plaintext);\n        ({\n          ciphertext,\n          tag\n        } = yield encrypt(enc, deflated, cek, _this._iv, additionalData));\n      } else {\n        ;\n        ({\n          ciphertext,\n          tag\n        } = yield encrypt(enc, _this._plaintext, cek, _this._iv, additionalData));\n      }\n\n      const jwe = {\n        ciphertext: base64url(ciphertext),\n        iv: base64url(_this._iv),\n        tag: base64url(tag)\n      };\n\n      if (encryptedKey) {\n        jwe.encrypted_key = base64url(encryptedKey);\n      }\n\n      if (aadMember) {\n        jwe.aad = aadMember;\n      }\n\n      if (_this._protectedHeader) {\n        jwe.protected = decoder.decode(protectedHeader);\n      }\n\n      if (_this._sharedUnprotectedHeader) {\n        jwe.unprotected = _this._sharedUnprotectedHeader;\n      }\n\n      if (_this._unprotectedHeader) {\n        jwe.header = _this._unprotectedHeader;\n      }\n\n      return jwe;\n    })();\n  }\n\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jwe/flattened/encrypt.js"],"names":["encode","base64url","encrypt","deflate","generateIv","encryptKeyManagement","JOSENotSupported","JWEInvalid","isDisjoint","encoder","decoder","concat","validateCrit","unprotected","Symbol","FlattenedEncrypt","constructor","plaintext","Uint8Array","TypeError","_plaintext","setKeyManagementParameters","parameters","_keyManagementParameters","setProtectedHeader","protectedHeader","_protectedHeader","setSharedUnprotectedHeader","sharedUnprotectedHeader","_sharedUnprotectedHeader","setUnprotectedHeader","unprotectedHeader","_unprotectedHeader","setAdditionalAuthenticatedData","aad","_aad","setContentEncryptionKey","cek","_cek","setInitializationVector","iv","_iv","key","options","joseHeader","Map","crit","zip","undefined","alg","enc","encryptedKey","additionalData","aadMember","JSON","stringify","ciphertext","tag","deflated","deflateRaw","jwe","encrypted_key","protected","decode","header"],"mappings":"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","sourcesContent":["import { encode as base64url } from '../../runtime/base64url.js';\nimport encrypt from '../../runtime/encrypt.js';\nimport { deflate } from '../../runtime/zlib.js';\nimport generateIv from '../../lib/iv.js';\nimport encryptKeyManagement from '../../lib/encrypt_key_management.js';\nimport { JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport validateCrit from '../../lib/validate_crit.js';\nexport const unprotected = Symbol();\nexport class FlattenedEncrypt {\n    constructor(plaintext) {\n        if (!(plaintext instanceof Uint8Array)) {\n            throw new TypeError('plaintext must be an instance of Uint8Array');\n        }\n        this._plaintext = plaintext;\n    }\n    setKeyManagementParameters(parameters) {\n        if (this._keyManagementParameters) {\n            throw new TypeError('setKeyManagementParameters can only be called once');\n        }\n        this._keyManagementParameters = parameters;\n        return this;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError('setProtectedHeader can only be called once');\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n        if (this._sharedUnprotectedHeader) {\n            throw new TypeError('setSharedUnprotectedHeader can only be called once');\n        }\n        this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError('setUnprotectedHeader can only be called once');\n        }\n        this._unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    setAdditionalAuthenticatedData(aad) {\n        this._aad = aad;\n        return this;\n    }\n    setContentEncryptionKey(cek) {\n        if (this._cek) {\n            throw new TypeError('setContentEncryptionKey can only be called once');\n        }\n        this._cek = cek;\n        return this;\n    }\n    setInitializationVector(iv) {\n        if (this._iv) {\n            throw new TypeError('setInitializationVector can only be called once');\n        }\n        this._iv = iv;\n        return this;\n    }\n    async encrypt(key, options) {\n        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {\n            throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');\n        }\n        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {\n            throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n        }\n        const joseHeader = {\n            ...this._protectedHeader,\n            ...this._unprotectedHeader,\n            ...this._sharedUnprotectedHeader,\n        };\n        validateCrit(JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n        if (joseHeader.zip !== undefined) {\n            if (!this._protectedHeader || !this._protectedHeader.zip) {\n                throw new JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n            }\n            if (joseHeader.zip !== 'DEF') {\n                throw new JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n            }\n        }\n        const { alg, enc } = joseHeader;\n        if (typeof alg !== 'string' || !alg) {\n            throw new JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n        }\n        if (typeof enc !== 'string' || !enc) {\n            throw new JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n        }\n        let encryptedKey;\n        if (alg === 'dir') {\n            if (this._cek) {\n                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');\n            }\n        }\n        else if (alg === 'ECDH-ES') {\n            if (this._cek) {\n                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');\n            }\n        }\n        let cek;\n        {\n            let parameters;\n            ({ cek, encryptedKey, parameters } = await encryptKeyManagement(alg, enc, key, this._cek, this._keyManagementParameters));\n            if (parameters) {\n                if (options && unprotected in options) {\n                    if (!this._unprotectedHeader) {\n                        this.setUnprotectedHeader(parameters);\n                    }\n                    else {\n                        this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };\n                    }\n                }\n                else {\n                    if (!this._protectedHeader) {\n                        this.setProtectedHeader(parameters);\n                    }\n                    else {\n                        this._protectedHeader = { ...this._protectedHeader, ...parameters };\n                    }\n                }\n            }\n        }\n        this._iv || (this._iv = generateIv(enc));\n        let additionalData;\n        let protectedHeader;\n        let aadMember;\n        if (this._protectedHeader) {\n            protectedHeader = encoder.encode(base64url(JSON.stringify(this._protectedHeader)));\n        }\n        else {\n            protectedHeader = encoder.encode('');\n        }\n        if (this._aad) {\n            aadMember = base64url(this._aad);\n            additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));\n        }\n        else {\n            additionalData = protectedHeader;\n        }\n        let ciphertext;\n        let tag;\n        if (joseHeader.zip === 'DEF') {\n            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || deflate)(this._plaintext);\n            ({ ciphertext, tag } = await encrypt(enc, deflated, cek, this._iv, additionalData));\n        }\n        else {\n            ;\n            ({ ciphertext, tag } = await encrypt(enc, this._plaintext, cek, this._iv, additionalData));\n        }\n        const jwe = {\n            ciphertext: base64url(ciphertext),\n            iv: base64url(this._iv),\n            tag: base64url(tag),\n        };\n        if (encryptedKey) {\n            jwe.encrypted_key = base64url(encryptedKey);\n        }\n        if (aadMember) {\n            jwe.aad = aadMember;\n        }\n        if (this._protectedHeader) {\n            jwe.protected = decoder.decode(protectedHeader);\n        }\n        if (this._sharedUnprotectedHeader) {\n            jwe.unprotected = this._sharedUnprotectedHeader;\n        }\n        if (this._unprotectedHeader) {\n            jwe.header = this._unprotectedHeader;\n        }\n        return jwe;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}