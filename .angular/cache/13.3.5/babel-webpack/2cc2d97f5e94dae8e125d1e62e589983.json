{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { compactDecrypt } from '../jwe/compact/decrypt.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTClaimValidationFailed } from '../util/errors.js';\nexport function jwtDecrypt(_x, _x2, _x3) {\n  return _jwtDecrypt.apply(this, arguments);\n}\n\nfunction _jwtDecrypt() {\n  _jwtDecrypt = _asyncToGenerator(function* (jwt, key, options) {\n    const decrypted = yield compactDecrypt(jwt, key, options);\n    const payload = jwtPayload(decrypted.protectedHeader, decrypted.plaintext, options);\n    const {\n      protectedHeader\n    } = decrypted;\n\n    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n      throw new JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', 'iss', 'mismatch');\n    }\n\n    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n      throw new JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', 'sub', 'mismatch');\n    }\n\n    if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n      throw new JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', 'aud', 'mismatch');\n    }\n\n    const result = {\n      payload,\n      protectedHeader\n    };\n\n    if (typeof key === 'function') {\n      return { ...result,\n        key: decrypted.key\n      };\n    }\n\n    return result;\n  });\n  return _jwtDecrypt.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jwt/decrypt.js"],"names":["compactDecrypt","jwtPayload","JWTClaimValidationFailed","jwtDecrypt","jwt","key","options","decrypted","payload","protectedHeader","plaintext","iss","undefined","sub","aud","JSON","stringify","result"],"mappings":";AAAA,SAASA,cAAT,QAA+B,2BAA/B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,wBAAT,QAAyC,mBAAzC;AACA,gBAAsBC,UAAtB;AAAA;AAAA;;;kCAAO,WAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6C;AAChD,UAAMC,SAAS,SAASP,cAAc,CAACI,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAAtC;AACA,UAAME,OAAO,GAAGP,UAAU,CAACM,SAAS,CAACE,eAAX,EAA4BF,SAAS,CAACG,SAAtC,EAAiDJ,OAAjD,CAA1B;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAsBF,SAA5B;;AACA,QAAIE,eAAe,CAACE,GAAhB,KAAwBC,SAAxB,IAAqCH,eAAe,CAACE,GAAhB,KAAwBH,OAAO,CAACG,GAAzE,EAA8E;AAC1E,YAAM,IAAIT,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;AACH;;AACD,QAAIO,eAAe,CAACI,GAAhB,KAAwBD,SAAxB,IAAqCH,eAAe,CAACI,GAAhB,KAAwBL,OAAO,CAACK,GAAzE,EAA8E;AAC1E,YAAM,IAAIX,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;AACH;;AACD,QAAIO,eAAe,CAACK,GAAhB,KAAwBF,SAAxB,IACAG,IAAI,CAACC,SAAL,CAAeP,eAAe,CAACK,GAA/B,MAAwCC,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACM,GAAvB,CAD5C,EACyE;AACrE,YAAM,IAAIZ,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;AACH;;AACD,UAAMe,MAAM,GAAG;AAAET,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAf;;AACA,QAAI,OAAOJ,GAAP,KAAe,UAAnB,EAA+B;AAC3B,aAAO,EAAE,GAAGY,MAAL;AAAaZ,QAAAA,GAAG,EAAEE,SAAS,CAACF;AAA5B,OAAP;AACH;;AACD,WAAOY,MAAP;AACH,G","sourcesContent":["import { compactDecrypt } from '../jwe/compact/decrypt.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTClaimValidationFailed } from '../util/errors.js';\nexport async function jwtDecrypt(jwt, key, options) {\n    const decrypted = await compactDecrypt(jwt, key, options);\n    const payload = jwtPayload(decrypted.protectedHeader, decrypted.plaintext, options);\n    const { protectedHeader } = decrypted;\n    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n        throw new JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', 'iss', 'mismatch');\n    }\n    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n        throw new JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', 'sub', 'mismatch');\n    }\n    if (protectedHeader.aud !== undefined &&\n        JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n        throw new JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', 'aud', 'mismatch');\n    }\n    const result = { payload, protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: decrypted.key };\n    }\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}