{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (alg, key, cek) {\n    if (!isCryptoKey(key)) {\n      throw new TypeError(invalidKeyInput(key, ...types));\n    }\n\n    checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n    checkKeyLength(alg, key);\n\n    if (key.usages.includes('encrypt')) {\n      return new Uint8Array(yield crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n    }\n\n    if (key.usages.includes('wrapKey')) {\n      const cryptoKeyCek = yield crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n      return new Uint8Array(yield crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n    }\n\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n  });\n\n  return function encrypt(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const decrypt = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (alg, key, encryptedKey) {\n    if (!isCryptoKey(key)) {\n      throw new TypeError(invalidKeyInput(key, ...types));\n    }\n\n    checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n    checkKeyLength(alg, key);\n\n    if (key.usages.includes('decrypt')) {\n      return new Uint8Array(yield crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n    }\n\n    if (key.usages.includes('unwrapKey')) {\n      const cryptoKeyCek = yield crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n      return new Uint8Array(yield crypto.subtle.exportKey('raw', cryptoKeyCek));\n    }\n\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n  });\n\n  return function decrypt(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/rsaes.js"],"names":["subtleAlgorithm","bogusWebCrypto","crypto","isCryptoKey","checkEncCryptoKey","checkKeyLength","invalidKeyInput","types","encrypt","alg","key","cek","TypeError","usages","includes","Uint8Array","subtle","cryptoKeyCek","importKey","wrapKey","decrypt","encryptedKey","unwrapKey","exportKey"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,cAAP,MAA2B,YAA3B;AACA,OAAOC,MAAP,IAAiBC,WAAjB,QAAoC,gBAApC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAO,MAAMC,OAAO;AAAA,+BAAG,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,EAAyB;AAC5C,QAAI,CAACR,WAAW,CAACO,GAAD,CAAhB,EAAuB;AACnB,YAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGH,KAAT,CAA7B,CAAN;AACH;;AACDH,IAAAA,iBAAiB,CAACM,GAAD,EAAMD,GAAN,EAAW,SAAX,EAAsB,SAAtB,CAAjB;AACAJ,IAAAA,cAAc,CAACI,GAAD,EAAMC,GAAN,CAAd;;AACA,QAAIA,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAChC,aAAO,IAAIC,UAAJ,OAAqBb,MAAM,CAACc,MAAP,CAAcR,OAAd,CAAsBR,eAAe,CAACS,GAAD,CAArC,EAA4CC,GAA5C,EAAiDC,GAAjD,CAArB,CAAP;AACH;;AACD,QAAID,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAChC,YAAMG,YAAY,SAASf,MAAM,CAACc,MAAP,CAAcE,SAAd,CAAwB,KAAxB,EAA+BP,GAA/B,EAAoC,GAAGV,cAAvC,CAA3B;AACA,aAAO,IAAIc,UAAJ,OAAqBb,MAAM,CAACc,MAAP,CAAcG,OAAd,CAAsB,KAAtB,EAA6BF,YAA7B,EAA2CP,GAA3C,EAAgDV,eAAe,CAACS,GAAD,CAA/D,CAArB,CAAP;AACH;;AACD,UAAM,IAAIG,SAAJ,CAAc,8EAAd,CAAN;AACH,GAdmB;;AAAA,kBAAPJ,OAAO;AAAA;AAAA;AAAA,GAAb;AAeP,OAAO,MAAMY,OAAO;AAAA,gCAAG,WAAOX,GAAP,EAAYC,GAAZ,EAAiBW,YAAjB,EAAkC;AACrD,QAAI,CAAClB,WAAW,CAACO,GAAD,CAAhB,EAAuB;AACnB,YAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGH,KAAT,CAA7B,CAAN;AACH;;AACDH,IAAAA,iBAAiB,CAACM,GAAD,EAAMD,GAAN,EAAW,SAAX,EAAsB,WAAtB,CAAjB;AACAJ,IAAAA,cAAc,CAACI,GAAD,EAAMC,GAAN,CAAd;;AACA,QAAIA,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;AAChC,aAAO,IAAIC,UAAJ,OAAqBb,MAAM,CAACc,MAAP,CAAcI,OAAd,CAAsBpB,eAAe,CAACS,GAAD,CAArC,EAA4CC,GAA5C,EAAiDW,YAAjD,CAArB,CAAP;AACH;;AACD,QAAIX,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,WAApB,CAAJ,EAAsC;AAClC,YAAMG,YAAY,SAASf,MAAM,CAACc,MAAP,CAAcM,SAAd,CAAwB,KAAxB,EAA+BD,YAA/B,EAA6CX,GAA7C,EAAkDV,eAAe,CAACS,GAAD,CAAjE,EAAwE,GAAGR,cAA3E,CAA3B;AACA,aAAO,IAAIc,UAAJ,OAAqBb,MAAM,CAACc,MAAP,CAAcO,SAAd,CAAwB,KAAxB,EAA+BN,YAA/B,CAArB,CAAP;AACH;;AACD,UAAM,IAAIL,SAAJ,CAAc,gFAAd,CAAN;AACH,GAdmB;;AAAA,kBAAPQ,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = async (alg, key, cek) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('encrypt')) {\n        return new Uint8Array(await crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n    }\n    if (key.usages.includes('wrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n};\nexport const decrypt = async (alg, key, encryptedKey) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('decrypt')) {\n        return new Uint8Array(await crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n    }\n    if (key.usages.includes('unwrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n};\n"]},"metadata":{},"sourceType":"module"}