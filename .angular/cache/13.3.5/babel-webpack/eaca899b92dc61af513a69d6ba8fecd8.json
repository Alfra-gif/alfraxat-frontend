{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\n\nfunction encryptKeyManagement(_x, _x2, _x3, _x4) {\n  return _encryptKeyManagement.apply(this, arguments);\n}\n\nfunction _encryptKeyManagement() {\n  _encryptKeyManagement = _asyncToGenerator(function* (alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    checkKeyType(alg, key, 'encrypt');\n\n    switch (alg) {\n      case 'dir':\n        {\n          cek = key;\n          break;\n        }\n\n      case 'ECDH-ES':\n      case 'ECDH-ES+A128KW':\n      case 'ECDH-ES+A192KW':\n      case 'ECDH-ES+A256KW':\n        {\n          if (!ECDH.ecdhAllowed(key)) {\n            throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n          }\n\n          const {\n            apu,\n            apv\n          } = providedParameters;\n          let {\n            epk: ephemeralKey\n          } = providedParameters;\n          ephemeralKey || (ephemeralKey = (yield ECDH.generateEpk(key)).privateKey);\n          const {\n            x,\n            y,\n            crv,\n            kty\n          } = yield exportJWK(ephemeralKey);\n          const sharedSecret = yield ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n          parameters = {\n            epk: {\n              x,\n              crv,\n              kty\n            }\n          };\n          if (kty === 'EC') parameters.epk.y = y;\n          if (apu) parameters.apu = base64url(apu);\n          if (apv) parameters.apv = base64url(apv);\n\n          if (alg === 'ECDH-ES') {\n            cek = sharedSecret;\n            break;\n          }\n\n          cek = providedCek || generateCek(enc);\n          const kwAlg = alg.slice(-6);\n          encryptedKey = yield aesKw(kwAlg, sharedSecret, cek);\n          break;\n        }\n\n      case 'RSA1_5':\n      case 'RSA-OAEP':\n      case 'RSA-OAEP-256':\n      case 'RSA-OAEP-384':\n      case 'RSA-OAEP-512':\n        {\n          cek = providedCek || generateCek(enc);\n          encryptedKey = yield rsaEs(alg, key, cek);\n          break;\n        }\n\n      case 'PBES2-HS256+A128KW':\n      case 'PBES2-HS384+A192KW':\n      case 'PBES2-HS512+A256KW':\n        {\n          cek = providedCek || generateCek(enc);\n          const {\n            p2c,\n            p2s\n          } = providedParameters;\n          ({\n            encryptedKey,\n            ...parameters\n          } = yield pbes2Kw(alg, key, cek, p2c, p2s));\n          break;\n        }\n\n      case 'A128KW':\n      case 'A192KW':\n      case 'A256KW':\n        {\n          cek = providedCek || generateCek(enc);\n          encryptedKey = yield aesKw(alg, key, cek);\n          break;\n        }\n\n      case 'A128GCMKW':\n      case 'A192GCMKW':\n      case 'A256GCMKW':\n        {\n          cek = providedCek || generateCek(enc);\n          const {\n            iv\n          } = providedParameters;\n          ({\n            encryptedKey,\n            ...parameters\n          } = yield aesGcmKw(alg, key, cek, iv));\n          break;\n        }\n\n      default:\n        {\n          throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        }\n    }\n\n    return {\n      cek,\n      encryptedKey,\n      parameters\n    };\n  });\n  return _encryptKeyManagement.apply(this, arguments);\n}\n\nexport default encryptKeyManagement;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/lib/encrypt_key_management.js"],"names":["wrap","aesKw","ECDH","encrypt","pbes2Kw","rsaEs","encode","base64url","generateCek","bitLength","cekLength","JOSENotSupported","exportJWK","checkKeyType","aesGcmKw","encryptKeyManagement","alg","enc","key","providedCek","providedParameters","encryptedKey","parameters","cek","ecdhAllowed","apu","apv","epk","ephemeralKey","generateEpk","privateKey","x","y","crv","kty","sharedSecret","deriveKey","parseInt","slice","kwAlg","p2c","p2s","iv"],"mappings":"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","sourcesContent":["import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    checkKeyType(alg, key, 'encrypt');\n    switch (alg) {\n        case 'dir': {\n            cek = key;\n            break;\n        }\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            if (!ECDH.ecdhAllowed(key)) {\n                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n            }\n            const { apu, apv } = providedParameters;\n            let { epk: ephemeralKey } = providedParameters;\n            ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n            const { x, y, crv, kty } = await exportJWK(ephemeralKey);\n            const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n            parameters = { epk: { x, crv, kty } };\n            if (kty === 'EC')\n                parameters.epk.y = y;\n            if (apu)\n                parameters.apu = base64url(apu);\n            if (apv)\n                parameters.apv = base64url(apv);\n            if (alg === 'ECDH-ES') {\n                cek = sharedSecret;\n                break;\n            }\n            cek = providedCek || generateCek(enc);\n            const kwAlg = alg.slice(-6);\n            encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n            break;\n        }\n        case 'RSA1_5':\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await rsaEs(alg, key, cek);\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW': {\n            cek = providedCek || generateCek(enc);\n            const { p2c, p2s } = providedParameters;\n            ({ encryptedKey, ...parameters } = await pbes2Kw(alg, key, cek, p2c, p2s));\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await aesKw(alg, key, cek);\n            break;\n        }\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW': {\n            cek = providedCek || generateCek(enc);\n            const { iv } = providedParameters;\n            ({ encryptedKey, ...parameters } = await aesGcmKw(alg, key, cek, iv));\n            break;\n        }\n        default: {\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        }\n    }\n    return { cek, encryptedKey, parameters };\n}\nexport default encryptKeyManagement;\n"]},"metadata":{},"sourceType":"module"}