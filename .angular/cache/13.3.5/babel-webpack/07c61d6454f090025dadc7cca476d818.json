{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\n\nfunction subtleMapping(jwk) {\n  let algorithm;\n  let keyUsages;\n\n  switch (jwk.kty) {\n    case 'oct':\n      {\n        switch (jwk.alg) {\n          case 'HS256':\n          case 'HS384':\n          case 'HS512':\n            algorithm = {\n              name: 'HMAC',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n\n          case 'A128CBC-HS256':\n          case 'A192CBC-HS384':\n          case 'A256CBC-HS512':\n            throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n\n          case 'A128GCM':\n          case 'A192GCM':\n          case 'A256GCM':\n          case 'A128GCMKW':\n          case 'A192GCMKW':\n          case 'A256GCMKW':\n            algorithm = {\n              name: 'AES-GCM'\n            };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n\n          case 'A128KW':\n          case 'A192KW':\n          case 'A256KW':\n            algorithm = {\n              name: 'AES-KW'\n            };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n\n          case 'PBES2-HS256+A128KW':\n          case 'PBES2-HS384+A192KW':\n          case 'PBES2-HS512+A256KW':\n            algorithm = {\n              name: 'PBKDF2'\n            };\n            keyUsages = ['deriveBits'];\n            break;\n\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n\n        break;\n      }\n\n    case 'RSA':\n      {\n        switch (jwk.alg) {\n          case 'PS256':\n          case 'PS384':\n          case 'PS512':\n            algorithm = {\n              name: 'RSA-PSS',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n\n          case 'RS256':\n          case 'RS384':\n          case 'RS512':\n            algorithm = {\n              name: 'RSASSA-PKCS1-v1_5',\n              hash: `SHA-${jwk.alg.slice(-3)}`\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n\n          case 'RSA-OAEP':\n          case 'RSA-OAEP-256':\n          case 'RSA-OAEP-384':\n          case 'RSA-OAEP-512':\n            algorithm = {\n              name: 'RSA-OAEP',\n              hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`\n            };\n            keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n            break;\n\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n\n        break;\n      }\n\n    case 'EC':\n      {\n        switch (jwk.alg) {\n          case 'ES256':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-256'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n\n          case 'ES384':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-384'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n\n          case 'ES512':\n            algorithm = {\n              name: 'ECDSA',\n              namedCurve: 'P-521'\n            };\n            keyUsages = jwk.d ? ['sign'] : ['verify'];\n            break;\n\n          case 'ECDH-ES':\n          case 'ECDH-ES+A128KW':\n          case 'ECDH-ES+A192KW':\n          case 'ECDH-ES+A256KW':\n            algorithm = {\n              name: 'ECDH',\n              namedCurve: jwk.crv\n            };\n            keyUsages = jwk.d ? ['deriveBits'] : [];\n            break;\n\n          default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n        }\n\n        break;\n      }\n\n    case (isCloudflareWorkers() || isNodeJs()) && 'OKP':\n      if (jwk.alg !== 'EdDSA') {\n        throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n      }\n\n      switch (jwk.crv) {\n        case 'Ed25519':\n          algorithm = {\n            name: 'NODE-ED25519',\n            namedCurve: 'NODE-ED25519'\n          };\n          keyUsages = jwk.d ? ['sign'] : ['verify'];\n          break;\n\n        case isNodeJs() && 'Ed448':\n          algorithm = {\n            name: 'NODE-ED448',\n            namedCurve: 'NODE-ED448'\n          };\n          keyUsages = jwk.d ? ['sign'] : ['verify'];\n          break;\n\n        default:\n          throw new JOSENotSupported('Invalid or unsupported JWK \"crv\" (Subtype of Key Pair) Parameter value');\n      }\n\n      break;\n\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n  }\n\n  return {\n    algorithm,\n    keyUsages\n  };\n}\n\nconst parse = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (jwk) {\n    var _a, _b;\n\n    const {\n      algorithm,\n      keyUsages\n    } = subtleMapping(jwk);\n    const rest = [algorithm, (_a = jwk.ext) !== null && _a !== void 0 ? _a : false, (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages];\n\n    if (algorithm.name === 'PBKDF2') {\n      return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n    }\n\n    const keyData = { ...jwk\n    };\n    delete keyData.alg;\n    return crypto.subtle.importKey('jwk', keyData, ...rest);\n  });\n\n  return function parse(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default parse;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/jwk_to_key.js"],"names":["isCloudflareWorkers","isNodeJs","crypto","JOSENotSupported","decode","base64url","subtleMapping","jwk","algorithm","keyUsages","kty","alg","name","hash","slice","d","parseInt","namedCurve","crv","parse","_a","_b","rest","ext","key_ops","subtle","importKey","k","keyData"],"mappings":"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","sourcesContent":["import { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { decode as base64url } from './base64url.js';\nfunction subtleMapping(jwk) {\n    let algorithm;\n    let keyUsages;\n    switch (jwk.kty) {\n        case 'oct': {\n            switch (jwk.alg) {\n                case 'HS256':\n                case 'HS384':\n                case 'HS512':\n                    algorithm = { name: 'HMAC', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case 'A128CBC-HS256':\n                case 'A192CBC-HS384':\n                case 'A256CBC-HS512':\n                    throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);\n                case 'A128GCM':\n                case 'A192GCM':\n                case 'A256GCM':\n                case 'A128GCMKW':\n                case 'A192GCMKW':\n                case 'A256GCMKW':\n                    algorithm = { name: 'AES-GCM' };\n                    keyUsages = ['encrypt', 'decrypt'];\n                    break;\n                case 'A128KW':\n                case 'A192KW':\n                case 'A256KW':\n                    algorithm = { name: 'AES-KW' };\n                    keyUsages = ['wrapKey', 'unwrapKey'];\n                    break;\n                case 'PBES2-HS256+A128KW':\n                case 'PBES2-HS384+A192KW':\n                case 'PBES2-HS512+A256KW':\n                    algorithm = { name: 'PBKDF2' };\n                    keyUsages = ['deriveBits'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'RSA': {\n            switch (jwk.alg) {\n                case 'PS256':\n                case 'PS384':\n                case 'PS512':\n                    algorithm = { name: 'RSA-PSS', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RS256':\n                case 'RS384':\n                case 'RS512':\n                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: `SHA-${jwk.alg.slice(-3)}` };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'RSA-OAEP':\n                case 'RSA-OAEP-256':\n                case 'RSA-OAEP-384':\n                case 'RSA-OAEP-512':\n                    algorithm = {\n                        name: 'RSA-OAEP',\n                        hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`,\n                    };\n                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case 'EC': {\n            switch (jwk.alg) {\n                case 'ES256':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES384':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ES512':\n                    algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case 'ECDH-ES':\n                case 'ECDH-ES+A128KW':\n                case 'ECDH-ES+A192KW':\n                case 'ECDH-ES+A256KW':\n                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };\n                    keyUsages = jwk.d ? ['deriveBits'] : [];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            break;\n        }\n        case (isCloudflareWorkers() || isNodeJs()) && 'OKP':\n            if (jwk.alg !== 'EdDSA') {\n                throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n            }\n            switch (jwk.crv) {\n                case 'Ed25519':\n                    algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                case isNodeJs() && 'Ed448':\n                    algorithm = { name: 'NODE-ED448', namedCurve: 'NODE-ED448' };\n                    keyUsages = jwk.d ? ['sign'] : ['verify'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported JWK \"crv\" (Subtype of Key Pair) Parameter value');\n            }\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n    }\n    return { algorithm, keyUsages };\n}\nconst parse = async (jwk) => {\n    var _a, _b;\n    const { algorithm, keyUsages } = subtleMapping(jwk);\n    const rest = [\n        algorithm,\n        (_a = jwk.ext) !== null && _a !== void 0 ? _a : false,\n        (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages,\n    ];\n    if (algorithm.name === 'PBKDF2') {\n        return crypto.subtle.importKey('raw', base64url(jwk.k), ...rest);\n    }\n    const keyData = { ...jwk };\n    delete keyData.alg;\n    return crypto.subtle.importKey('jwk', keyData, ...rest);\n};\nexport default parse;\n"]},"metadata":{},"sourceType":"module"}