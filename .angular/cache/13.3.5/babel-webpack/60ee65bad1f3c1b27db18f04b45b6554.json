{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid } from '../../util/errors.js';\nimport { decoder } from '../../lib/buffer_utils.js';\nexport function compactVerify(_x, _x2, _x3) {\n  return _compactVerify.apply(this, arguments);\n}\n\nfunction _compactVerify() {\n  _compactVerify = _asyncToGenerator(function* (jws, key, options) {\n    if (jws instanceof Uint8Array) {\n      jws = decoder.decode(jws);\n    }\n\n    if (typeof jws !== 'string') {\n      throw new JWSInvalid('Compact JWS must be a string or Uint8Array');\n    }\n\n    const {\n      0: protectedHeader,\n      1: payload,\n      2: signature,\n      length\n    } = jws.split('.');\n\n    if (length !== 3) {\n      throw new JWSInvalid('Invalid Compact JWS');\n    }\n\n    const verified = yield flattenedVerify({\n      payload,\n      protected: protectedHeader,\n      signature\n    }, key, options);\n    const result = {\n      payload: verified.payload,\n      protectedHeader: verified.protectedHeader\n    };\n\n    if (typeof key === 'function') {\n      return { ...result,\n        key: verified.key\n      };\n    }\n\n    return result;\n  });\n  return _compactVerify.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jws/compact/verify.js"],"names":["flattenedVerify","JWSInvalid","decoder","compactVerify","jws","key","options","Uint8Array","decode","protectedHeader","payload","signature","length","split","verified","protected","result"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,gBAAsBC,aAAtB;AAAA;AAAA;;;qCAAO,WAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,OAAvC,EAAgD;AACnD,QAAIF,GAAG,YAAYG,UAAnB,EAA+B;AAC3BH,MAAAA,GAAG,GAAGF,OAAO,CAACM,MAAR,CAAeJ,GAAf,CAAN;AACH;;AACD,QAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,YAAM,IAAIH,UAAJ,CAAe,4CAAf,CAAN;AACH;;AACD,UAAM;AAAE,SAAGQ,eAAL;AAAsB,SAAGC,OAAzB;AAAkC,SAAGC,SAArC;AAAgDC,MAAAA;AAAhD,QAA2DR,GAAG,CAACS,KAAJ,CAAU,GAAV,CAAjE;;AACA,QAAID,MAAM,KAAK,CAAf,EAAkB;AACd,YAAM,IAAIX,UAAJ,CAAe,qBAAf,CAAN;AACH;;AACD,UAAMa,QAAQ,SAASd,eAAe,CAAC;AAAEU,MAAAA,OAAF;AAAWK,MAAAA,SAAS,EAAEN,eAAtB;AAAuCE,MAAAA;AAAvC,KAAD,EAAqDN,GAArD,EAA0DC,OAA1D,CAAtC;AACA,UAAMU,MAAM,GAAG;AAAEN,MAAAA,OAAO,EAAEI,QAAQ,CAACJ,OAApB;AAA6BD,MAAAA,eAAe,EAAEK,QAAQ,CAACL;AAAvD,KAAf;;AACA,QAAI,OAAOJ,GAAP,KAAe,UAAnB,EAA+B;AAC3B,aAAO,EAAE,GAAGW,MAAL;AAAaX,QAAAA,GAAG,EAAES,QAAQ,CAACT;AAA3B,OAAP;AACH;;AACD,WAAOW,MAAP;AACH,G","sourcesContent":["import { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid } from '../../util/errors.js';\nimport { decoder } from '../../lib/buffer_utils.js';\nexport async function compactVerify(jws, key, options) {\n    if (jws instanceof Uint8Array) {\n        jws = decoder.decode(jws);\n    }\n    if (typeof jws !== 'string') {\n        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');\n    }\n    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');\n    if (length !== 3) {\n        throw new JWSInvalid('Invalid Compact JWS');\n    }\n    const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);\n    const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}