{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getVerifyKey from './get_sign_verify_key.js';\n\nconst verify = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (alg, key, signature, data) {\n    const cryptoKey = yield getVerifyKey(alg, key, 'verify');\n    checkKeyLength(alg, cryptoKey);\n    const algorithm = subtleAlgorithm(alg, cryptoKey.algorithm);\n\n    try {\n      return yield crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n    } catch (_a) {\n      return false;\n    }\n  });\n\n  return function verify(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default verify;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/verify.js"],"names":["subtleAlgorithm","crypto","checkKeyLength","getVerifyKey","verify","alg","key","signature","data","cryptoKey","algorithm","subtle","_a"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,iBAA5B;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AACA,MAAMC,MAAM;AAAA,+BAAG,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,SAAjB,EAA4BC,IAA5B,EAAqC;AAChD,UAAMC,SAAS,SAASN,YAAY,CAACE,GAAD,EAAMC,GAAN,EAAW,QAAX,CAApC;AACAJ,IAAAA,cAAc,CAACG,GAAD,EAAMI,SAAN,CAAd;AACA,UAAMC,SAAS,GAAGV,eAAe,CAACK,GAAD,EAAMI,SAAS,CAACC,SAAhB,CAAjC;;AACA,QAAI;AACA,mBAAaT,MAAM,CAACU,MAAP,CAAcP,MAAd,CAAqBM,SAArB,EAAgCD,SAAhC,EAA2CF,SAA3C,EAAsDC,IAAtD,CAAb;AACH,KAFD,CAGA,OAAOI,EAAP,EAAW;AACP,aAAO,KAAP;AACH;AACJ,GAVW;;AAAA,kBAANR,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAWA,eAAeA,MAAf","sourcesContent":["import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getVerifyKey from './get_sign_verify_key.js';\nconst verify = async (alg, key, signature, data) => {\n    const cryptoKey = await getVerifyKey(alg, key, 'verify');\n    checkKeyLength(alg, cryptoKey);\n    const algorithm = subtleAlgorithm(alg, cryptoKey.algorithm);\n    try {\n        return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);\n    }\n    catch (_a) {\n        return false;\n    }\n};\nexport default verify;\n"]},"metadata":{},"sourceType":"module"}