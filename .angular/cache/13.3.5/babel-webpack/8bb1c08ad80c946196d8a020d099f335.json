{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport function generateSecret(_x, _x2) {\n  return _generateSecret.apply(this, arguments);\n}\n\nfunction _generateSecret() {\n  _generateSecret = _asyncToGenerator(function* (alg, options) {\n    var _a;\n\n    let length;\n    let algorithm;\n    let keyUsages;\n\n    switch (alg) {\n      case 'HS256':\n      case 'HS384':\n      case 'HS512':\n        length = parseInt(alg.slice(-3), 10);\n        algorithm = {\n          name: 'HMAC',\n          hash: `SHA-${length}`,\n          length\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case 'A128CBC-HS256':\n      case 'A192CBC-HS384':\n      case 'A256CBC-HS512':\n        length = parseInt(alg.slice(-3), 10);\n        return random(new Uint8Array(length >> 3));\n\n      case 'A128KW':\n      case 'A192KW':\n      case 'A256KW':\n        length = parseInt(alg.slice(1, 4), 10);\n        algorithm = {\n          name: 'AES-KW',\n          length\n        };\n        keyUsages = ['wrapKey', 'unwrapKey'];\n        break;\n\n      case 'A128GCMKW':\n      case 'A192GCMKW':\n      case 'A256GCMKW':\n      case 'A128GCM':\n      case 'A192GCM':\n      case 'A256GCM':\n        length = parseInt(alg.slice(1, 4), 10);\n        algorithm = {\n          name: 'AES-GCM',\n          length\n        };\n        keyUsages = ['encrypt', 'decrypt'];\n        break;\n\n      default:\n        throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n\n    return crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n  });\n  return _generateSecret.apply(this, arguments);\n}\n\nfunction getModulusLengthOption(options) {\n  var _a;\n\n  const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n\n  if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n    throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n  }\n\n  return modulusLength;\n}\n\nexport function generateKeyPair(_x3, _x4) {\n  return _generateKeyPair.apply(this, arguments);\n}\n\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator(function* (alg, options) {\n    var _a, _b;\n\n    let algorithm;\n    let keyUsages;\n\n    switch (alg) {\n      case 'PS256':\n      case 'PS384':\n      case 'PS512':\n        algorithm = {\n          name: 'RSA-PSS',\n          hash: `SHA-${alg.slice(-3)}`,\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          modulusLength: getModulusLengthOption(options)\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case 'RS256':\n      case 'RS384':\n      case 'RS512':\n        algorithm = {\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: `SHA-${alg.slice(-3)}`,\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          modulusLength: getModulusLengthOption(options)\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case 'RSA-OAEP':\n      case 'RSA-OAEP-256':\n      case 'RSA-OAEP-384':\n      case 'RSA-OAEP-512':\n        algorithm = {\n          name: 'RSA-OAEP',\n          hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          modulusLength: getModulusLengthOption(options)\n        };\n        keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n        break;\n\n      case 'ES256':\n        algorithm = {\n          name: 'ECDSA',\n          namedCurve: 'P-256'\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case 'ES384':\n        algorithm = {\n          name: 'ECDSA',\n          namedCurve: 'P-384'\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case 'ES512':\n        algorithm = {\n          name: 'ECDSA',\n          namedCurve: 'P-521'\n        };\n        keyUsages = ['sign', 'verify'];\n        break;\n\n      case (isCloudflareWorkers() || isNodeJs()) && 'EdDSA':\n        switch (options === null || options === void 0 ? void 0 : options.crv) {\n          case undefined:\n          case 'Ed25519':\n            algorithm = {\n              name: 'NODE-ED25519',\n              namedCurve: 'NODE-ED25519'\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n\n          case isNodeJs() && 'Ed448':\n            algorithm = {\n              name: 'NODE-ED448',\n              namedCurve: 'NODE-ED448'\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n\n          default:\n            throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');\n        }\n\n        break;\n\n      case 'ECDH-ES':\n      case 'ECDH-ES+A128KW':\n      case 'ECDH-ES+A192KW':\n      case 'ECDH-ES+A256KW':\n        algorithm = {\n          name: 'ECDH',\n          namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256'\n        };\n        keyUsages = ['deriveKey', 'deriveBits'];\n        break;\n\n      default:\n        throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n\n    return crypto.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);\n  });\n  return _generateKeyPair.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/generate.js"],"names":["isCloudflareWorkers","isNodeJs","crypto","JOSENotSupported","random","generateSecret","alg","options","_a","length","algorithm","keyUsages","parseInt","slice","name","hash","Uint8Array","subtle","generateKey","extractable","getModulusLengthOption","modulusLength","generateKeyPair","_b","publicExponent","namedCurve","crv","undefined"],"mappings":"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","sourcesContent":["import { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n    var _a;\n    let length;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            length = parseInt(alg.slice(-3), 10);\n            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            length = parseInt(alg.slice(-3), 10);\n            return random(new Uint8Array(length >> 3));\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-KW', length };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW':\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-GCM', length };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n}\nfunction getModulusLengthOption(options) {\n    var _a;\n    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n    if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n        throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n    }\n    return modulusLength;\n}\nexport async function generateKeyPair(alg, options) {\n    var _a, _b;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = {\n                name: 'RSA-PSS',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case (isCloudflareWorkers() || isNodeJs()) && 'EdDSA':\n            switch (options === null || options === void 0 ? void 0 : options.crv) {\n                case undefined:\n                case 'Ed25519':\n                    algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case isNodeJs() && 'Ed448':\n                    algorithm = { name: 'NODE-ED448', namedCurve: 'NODE-ED448' };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');\n            }\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW':\n            algorithm = { name: 'ECDH', namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256' };\n            keyUsages = ['deriveKey', 'deriveBits'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return (crypto.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages));\n}\n"]},"metadata":{},"sourceType":"module"}