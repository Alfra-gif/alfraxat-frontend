{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\n\nfunction getCryptoKey(key, alg) {\n  if (key instanceof Uint8Array) {\n    return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n  }\n\n  if (isCryptoKey(key)) {\n    checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n    return key;\n  }\n\n  throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\n\nfunction deriveKey(_x, _x2, _x3, _x4) {\n  return _deriveKey.apply(this, arguments);\n}\n\nfunction _deriveKey() {\n  _deriveKey = _asyncToGenerator(function* (p2s, alg, p2c, key) {\n    checkP2s(p2s);\n    const salt = concatSalt(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10);\n    const subtleAlg = {\n      hash: `SHA-${alg.slice(8, 11)}`,\n      iterations: p2c,\n      name: 'PBKDF2',\n      salt\n    };\n    const wrapAlg = {\n      length: keylen,\n      name: 'AES-KW'\n    };\n    const cryptoKey = yield getCryptoKey(key, alg);\n\n    if (cryptoKey.usages.includes('deriveBits')) {\n      return new Uint8Array(yield crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n    }\n\n    if (cryptoKey.usages.includes('deriveKey')) {\n      return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n    }\n\n    throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n  });\n  return _deriveKey.apply(this, arguments);\n}\n\nexport const encrypt = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) {\n    const derived = yield deriveKey(p2s, alg, p2c, key);\n    const encryptedKey = yield wrap(alg.slice(-6), derived, cek);\n    return {\n      encryptedKey,\n      p2c,\n      p2s: base64url(p2s)\n    };\n  });\n\n  return function encrypt(_x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport const decrypt = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (alg, key, encryptedKey, p2c, p2s) {\n    const derived = yield deriveKey(p2s, alg, p2c, key);\n    return unwrap(alg.slice(-6), derived, encryptedKey);\n  });\n\n  return function decrypt(_x8, _x9, _x10, _x11, _x12) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/pbes2kw.js"],"names":["random","p2s","concatSalt","encode","base64url","wrap","unwrap","checkP2s","crypto","isCryptoKey","checkEncCryptoKey","invalidKeyInput","types","getCryptoKey","key","alg","Uint8Array","subtle","importKey","TypeError","deriveKey","p2c","salt","keylen","parseInt","slice","subtleAlg","hash","iterations","name","wrapAlg","length","cryptoKey","usages","includes","deriveBits","encrypt","cek","derived","encryptedKey","decrypt"],"mappings":"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","sourcesContent":["import random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nfunction getCryptoKey(key, alg) {\n    if (key instanceof Uint8Array) {\n        return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n    }\n    if (isCryptoKey(key)) {\n        checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n        return key;\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\nasync function deriveKey(p2s, alg, p2c, key) {\n    checkP2s(p2s);\n    const salt = concatSalt(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10);\n    const subtleAlg = {\n        hash: `SHA-${alg.slice(8, 11)}`,\n        iterations: p2c,\n        name: 'PBKDF2',\n        salt,\n    };\n    const wrapAlg = {\n        length: keylen,\n        name: 'AES-KW',\n    };\n    const cryptoKey = await getCryptoKey(key, alg);\n    if (cryptoKey.usages.includes('deriveBits')) {\n        return new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n    }\n    if (cryptoKey.usages.includes('deriveKey')) {\n        return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n    }\n    throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n}\nexport const encrypt = async (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    const encryptedKey = await wrap(alg.slice(-6), derived, cek);\n    return { encryptedKey, p2c, p2s: base64url(p2s) };\n};\nexport const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    return unwrap(alg.slice(-6), derived, encryptedKey);\n};\n"]},"metadata":{},"sourceType":"module"}