{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { flattenedDecrypt } from '../flattened/decrypt.js';\nimport { JWEDecryptionFailed, JWEInvalid } from '../../util/errors.js';\nimport isObject from '../../lib/is_object.js';\nexport function generalDecrypt(_x, _x2, _x3) {\n  return _generalDecrypt.apply(this, arguments);\n}\n\nfunction _generalDecrypt() {\n  _generalDecrypt = _asyncToGenerator(function* (jwe, key, options) {\n    if (!isObject(jwe)) {\n      throw new JWEInvalid('General JWE must be an object');\n    }\n\n    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {\n      throw new JWEInvalid('JWE Recipients missing or incorrect type');\n    }\n\n    if (!jwe.recipients.length) {\n      throw new JWEInvalid('JWE Recipients has no members');\n    }\n\n    for (const recipient of jwe.recipients) {\n      try {\n        return yield flattenedDecrypt({\n          aad: jwe.aad,\n          ciphertext: jwe.ciphertext,\n          encrypted_key: recipient.encrypted_key,\n          header: recipient.header,\n          iv: jwe.iv,\n          protected: jwe.protected,\n          tag: jwe.tag,\n          unprotected: jwe.unprotected\n        }, key, options);\n      } catch (_a) {}\n    }\n\n    throw new JWEDecryptionFailed();\n  });\n  return _generalDecrypt.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jwe/general/decrypt.js"],"names":["flattenedDecrypt","JWEDecryptionFailed","JWEInvalid","isObject","generalDecrypt","jwe","key","options","Array","isArray","recipients","every","length","recipient","aad","ciphertext","encrypted_key","header","iv","protected","tag","unprotected","_a"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,sBAAhD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,gBAAsBC,cAAtB;AAAA;AAAA;;;sCAAO,WAA8BC,GAA9B,EAAmCC,GAAnC,EAAwCC,OAAxC,EAAiD;AACpD,QAAI,CAACJ,QAAQ,CAACE,GAAD,CAAb,EAAoB;AAChB,YAAM,IAAIH,UAAJ,CAAe,+BAAf,CAAN;AACH;;AACD,QAAI,CAACM,KAAK,CAACC,OAAN,CAAcJ,GAAG,CAACK,UAAlB,CAAD,IAAkC,CAACL,GAAG,CAACK,UAAJ,CAAeC,KAAf,CAAqBR,QAArB,CAAvC,EAAuE;AACnE,YAAM,IAAID,UAAJ,CAAe,0CAAf,CAAN;AACH;;AACD,QAAI,CAACG,GAAG,CAACK,UAAJ,CAAeE,MAApB,EAA4B;AACxB,YAAM,IAAIV,UAAJ,CAAe,+BAAf,CAAN;AACH;;AACD,SAAK,MAAMW,SAAX,IAAwBR,GAAG,CAACK,UAA5B,EAAwC;AACpC,UAAI;AACA,qBAAaV,gBAAgB,CAAC;AAC1Bc,UAAAA,GAAG,EAAET,GAAG,CAACS,GADiB;AAE1BC,UAAAA,UAAU,EAAEV,GAAG,CAACU,UAFU;AAG1BC,UAAAA,aAAa,EAAEH,SAAS,CAACG,aAHC;AAI1BC,UAAAA,MAAM,EAAEJ,SAAS,CAACI,MAJQ;AAK1BC,UAAAA,EAAE,EAAEb,GAAG,CAACa,EALkB;AAM1BC,UAAAA,SAAS,EAAEd,GAAG,CAACc,SANW;AAO1BC,UAAAA,GAAG,EAAEf,GAAG,CAACe,GAPiB;AAQ1BC,UAAAA,WAAW,EAAEhB,GAAG,CAACgB;AARS,SAAD,EAS1Bf,GAT0B,EASrBC,OATqB,CAA7B;AAUH,OAXD,CAYA,OAAOe,EAAP,EAAW,CACV;AACJ;;AACD,UAAM,IAAIrB,mBAAJ,EAAN;AACH,G","sourcesContent":["import { flattenedDecrypt } from '../flattened/decrypt.js';\nimport { JWEDecryptionFailed, JWEInvalid } from '../../util/errors.js';\nimport isObject from '../../lib/is_object.js';\nexport async function generalDecrypt(jwe, key, options) {\n    if (!isObject(jwe)) {\n        throw new JWEInvalid('General JWE must be an object');\n    }\n    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {\n        throw new JWEInvalid('JWE Recipients missing or incorrect type');\n    }\n    if (!jwe.recipients.length) {\n        throw new JWEInvalid('JWE Recipients has no members');\n    }\n    for (const recipient of jwe.recipients) {\n        try {\n            return await flattenedDecrypt({\n                aad: jwe.aad,\n                ciphertext: jwe.ciphertext,\n                encrypted_key: recipient.encrypted_key,\n                header: recipient.header,\n                iv: jwe.iv,\n                protected: jwe.protected,\n                tag: jwe.tag,\n                unprotected: jwe.unprotected,\n            }, key, options);\n        }\n        catch (_a) {\n        }\n    }\n    throw new JWEDecryptionFailed();\n}\n"]},"metadata":{},"sourceType":"module"}