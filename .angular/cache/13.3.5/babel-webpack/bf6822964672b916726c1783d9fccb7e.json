{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getSignKey from './get_sign_verify_key.js';\n\nconst sign = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (alg, key, data) {\n    const cryptoKey = yield getSignKey(alg, key, 'sign');\n    checkKeyLength(alg, cryptoKey);\n    const signature = yield crypto.subtle.sign(subtleAlgorithm(alg, cryptoKey.algorithm), cryptoKey, data);\n    return new Uint8Array(signature);\n  });\n\n  return function sign(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default sign;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/sign.js"],"names":["subtleAlgorithm","crypto","checkKeyLength","getSignKey","sign","alg","key","data","cryptoKey","signature","subtle","algorithm","Uint8Array"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,iBAA5B;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;AACA,MAAMC,IAAI;AAAA,+BAAG,WAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AACnC,UAAMC,SAAS,SAASL,UAAU,CAACE,GAAD,EAAMC,GAAN,EAAW,MAAX,CAAlC;AACAJ,IAAAA,cAAc,CAACG,GAAD,EAAMG,SAAN,CAAd;AACA,UAAMC,SAAS,SAASR,MAAM,CAACS,MAAP,CAAcN,IAAd,CAAmBJ,eAAe,CAACK,GAAD,EAAMG,SAAS,CAACG,SAAhB,CAAlC,EAA8DH,SAA9D,EAAyED,IAAzE,CAAxB;AACA,WAAO,IAAIK,UAAJ,CAAeH,SAAf,CAAP;AACH,GALS;;AAAA,kBAAJL,IAAI;AAAA;AAAA;AAAA,GAAV;;AAMA,eAAeA,IAAf","sourcesContent":["import subtleAlgorithm from './subtle_dsa.js';\nimport crypto from './webcrypto.js';\nimport checkKeyLength from './check_key_length.js';\nimport getSignKey from './get_sign_verify_key.js';\nconst sign = async (alg, key, data) => {\n    const cryptoKey = await getSignKey(alg, key, 'sign');\n    checkKeyLength(alg, cryptoKey);\n    const signature = await crypto.subtle.sign(subtleAlgorithm(alg, cryptoKey.algorithm), cryptoKey, data);\n    return new Uint8Array(signature);\n};\nexport default sign;\n"]},"metadata":{},"sourceType":"module"}