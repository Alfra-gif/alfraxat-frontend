{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat, uint64be } from '../lib/buffer_utils.js';\nimport checkIvLength from '../lib/check_iv_length.js';\nimport checkCekLength from './check_cek_length.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\n\nfunction cbcEncrypt(_x, _x2, _x3, _x4, _x5) {\n  return _cbcEncrypt.apply(this, arguments);\n}\n\nfunction _cbcEncrypt() {\n  _cbcEncrypt = _asyncToGenerator(function* (enc, plaintext, cek, iv, aad) {\n    if (!(cek instanceof Uint8Array)) {\n      throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));\n    }\n\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const encKey = yield crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);\n    const macKey = yield crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {\n      hash: `SHA-${keySize << 1}`,\n      name: 'HMAC'\n    }, false, ['sign']);\n    const ciphertext = new Uint8Array(yield crypto.subtle.encrypt({\n      iv,\n      name: 'AES-CBC'\n    }, encKey, plaintext));\n    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));\n    const tag = new Uint8Array((yield crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));\n    return {\n      ciphertext,\n      tag\n    };\n  });\n  return _cbcEncrypt.apply(this, arguments);\n}\n\nfunction gcmEncrypt(_x6, _x7, _x8, _x9, _x10) {\n  return _gcmEncrypt.apply(this, arguments);\n}\n\nfunction _gcmEncrypt() {\n  _gcmEncrypt = _asyncToGenerator(function* (enc, plaintext, cek, iv, aad) {\n    let encKey;\n\n    if (cek instanceof Uint8Array) {\n      encKey = yield crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt']);\n    } else {\n      checkEncCryptoKey(cek, enc, 'encrypt');\n      encKey = cek;\n    }\n\n    const encrypted = new Uint8Array(yield crypto.subtle.encrypt({\n      additionalData: aad,\n      iv,\n      name: 'AES-GCM',\n      tagLength: 128\n    }, encKey, plaintext));\n    const tag = encrypted.slice(-16);\n    const ciphertext = encrypted.slice(0, -16);\n    return {\n      ciphertext,\n      tag\n    };\n  });\n  return _gcmEncrypt.apply(this, arguments);\n}\n\nconst encrypt = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (enc, plaintext, cek, iv, aad) {\n    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {\n      throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));\n    }\n\n    checkIvLength(enc, iv);\n\n    switch (enc) {\n      case 'A128CBC-HS256':\n      case 'A192CBC-HS384':\n      case 'A256CBC-HS512':\n        if (cek instanceof Uint8Array) checkCekLength(cek, parseInt(enc.slice(-3), 10));\n        return cbcEncrypt(enc, plaintext, cek, iv, aad);\n\n      case 'A128GCM':\n      case 'A192GCM':\n      case 'A256GCM':\n        if (cek instanceof Uint8Array) checkCekLength(cek, parseInt(enc.slice(1, 4), 10));\n        return gcmEncrypt(enc, plaintext, cek, iv, aad);\n\n      default:\n        throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n    }\n  });\n\n  return function encrypt(_x11, _x12, _x13, _x14, _x15) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default encrypt;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/encrypt.js"],"names":["concat","uint64be","checkIvLength","checkCekLength","crypto","isCryptoKey","checkEncCryptoKey","invalidKeyInput","JOSENotSupported","types","cbcEncrypt","enc","plaintext","cek","iv","aad","Uint8Array","TypeError","keySize","parseInt","slice","encKey","subtle","importKey","subarray","macKey","hash","name","ciphertext","encrypt","macData","length","tag","sign","gcmEncrypt","encrypted","additionalData","tagLength"],"mappings":"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","sourcesContent":["import { concat, uint64be } from '../lib/buffer_utils.js';\nimport checkIvLength from '../lib/check_iv_length.js';\nimport checkCekLength from './check_cek_length.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { types } from './is_key_like.js';\nasync function cbcEncrypt(enc, plaintext, cek, iv, aad) {\n    if (!(cek instanceof Uint8Array)) {\n        throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));\n    }\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const encKey = await crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);\n    const macKey = await crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {\n        hash: `SHA-${keySize << 1}`,\n        name: 'HMAC',\n    }, false, ['sign']);\n    const ciphertext = new Uint8Array(await crypto.subtle.encrypt({\n        iv,\n        name: 'AES-CBC',\n    }, encKey, plaintext));\n    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));\n    const tag = new Uint8Array((await crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));\n    return { ciphertext, tag };\n}\nasync function gcmEncrypt(enc, plaintext, cek, iv, aad) {\n    let encKey;\n    if (cek instanceof Uint8Array) {\n        encKey = await crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt']);\n    }\n    else {\n        checkEncCryptoKey(cek, enc, 'encrypt');\n        encKey = cek;\n    }\n    const encrypted = new Uint8Array(await crypto.subtle.encrypt({\n        additionalData: aad,\n        iv,\n        name: 'AES-GCM',\n        tagLength: 128,\n    }, encKey, plaintext));\n    const tag = encrypted.slice(-16);\n    const ciphertext = encrypted.slice(0, -16);\n    return { ciphertext, tag };\n}\nconst encrypt = async (enc, plaintext, cek, iv, aad) => {\n    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {\n        throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));\n    }\n    checkIvLength(enc, iv);\n    switch (enc) {\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            if (cek instanceof Uint8Array)\n                checkCekLength(cek, parseInt(enc.slice(-3), 10));\n            return cbcEncrypt(enc, plaintext, cek, iv, aad);\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            if (cek instanceof Uint8Array)\n                checkCekLength(cek, parseInt(enc.slice(1, 4), 10));\n            return gcmEncrypt(enc, plaintext, cek, iv, aad);\n        default:\n            throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n    }\n};\nexport default encrypt;\n"]},"metadata":{},"sourceType":"module"}