{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { compactVerify } from '../jws/compact/verify.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTInvalid } from '../util/errors.js';\nexport function jwtVerify(_x, _x2, _x3) {\n  return _jwtVerify.apply(this, arguments);\n}\n\nfunction _jwtVerify() {\n  _jwtVerify = _asyncToGenerator(function* (jwt, key, options) {\n    var _a;\n\n    const verified = yield compactVerify(jwt, key, options);\n\n    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {\n      throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n\n    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);\n    const result = {\n      payload,\n      protectedHeader: verified.protectedHeader\n    };\n\n    if (typeof key === 'function') {\n      return { ...result,\n        key: verified.key\n      };\n    }\n\n    return result;\n  });\n  return _jwtVerify.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jwt/verify.js"],"names":["compactVerify","jwtPayload","JWTInvalid","jwtVerify","jwt","key","options","_a","verified","protectedHeader","crit","includes","b64","payload","result"],"mappings":";AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,gBAAsBC,SAAtB;AAAA;AAAA;;;iCAAO,WAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;AAC/C,QAAIC,EAAJ;;AACA,UAAMC,QAAQ,SAASR,aAAa,CAACI,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAApC;;AACA,QAAI,CAAC,CAACC,EAAE,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,IAA/B,MAAyC,IAAzC,IAAiDH,EAAE,KAAK,KAAK,CAA7D,GAAiE,KAAK,CAAtE,GAA0EA,EAAE,CAACI,QAAH,CAAY,KAAZ,CAA3E,KAAkGH,QAAQ,CAACC,eAAT,CAAyBG,GAAzB,KAAiC,KAAvI,EAA8I;AAC1I,YAAM,IAAIV,UAAJ,CAAe,qCAAf,CAAN;AACH;;AACD,UAAMW,OAAO,GAAGZ,UAAU,CAACO,QAAQ,CAACC,eAAV,EAA2BD,QAAQ,CAACK,OAApC,EAA6CP,OAA7C,CAA1B;AACA,UAAMQ,MAAM,GAAG;AAAED,MAAAA,OAAF;AAAWJ,MAAAA,eAAe,EAAED,QAAQ,CAACC;AAArC,KAAf;;AACA,QAAI,OAAOJ,GAAP,KAAe,UAAnB,EAA+B;AAC3B,aAAO,EAAE,GAAGS,MAAL;AAAaT,QAAAA,GAAG,EAAEG,QAAQ,CAACH;AAA3B,OAAP;AACH;;AACD,WAAOS,MAAP;AACH,G","sourcesContent":["import { compactVerify } from '../jws/compact/verify.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTInvalid } from '../util/errors.js';\nexport async function jwtVerify(jwt, key, options) {\n    var _a;\n    const verified = await compactVerify(jwt, key, options);\n    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {\n        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);\n    const result = { payload, protectedHeader: verified.protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: verified.key };\n    }\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}