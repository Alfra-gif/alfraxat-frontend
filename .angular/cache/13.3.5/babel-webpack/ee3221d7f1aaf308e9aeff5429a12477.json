{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encode as base64url } from './base64url.js';\nimport { types } from './is_key_like.js';\n\nconst keyToJWK = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (key) {\n    if (key instanceof Uint8Array) {\n      return {\n        kty: 'oct',\n        k: base64url(key)\n      };\n    }\n\n    if (!isCryptoKey(key)) {\n      throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n    }\n\n    if (!key.extractable) {\n      throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');\n    }\n\n    const {\n      ext,\n      key_ops,\n      alg,\n      use,\n      ...jwk\n    } = yield crypto.subtle.exportKey('jwk', key);\n    return jwk;\n  });\n\n  return function keyToJWK(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default keyToJWK;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/key_to_jwk.js"],"names":["crypto","isCryptoKey","invalidKeyInput","encode","base64url","types","keyToJWK","key","Uint8Array","kty","k","TypeError","extractable","ext","key_ops","alg","use","jwk","subtle","exportKey"],"mappings":";AAAA,OAAOA,MAAP,IAAiBC,WAAjB,QAAoC,gBAApC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,gBAApC;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AACA,MAAMC,QAAQ;AAAA,+BAAG,WAAOC,GAAP,EAAe;AAC5B,QAAIA,GAAG,YAAYC,UAAnB,EAA+B;AAC3B,aAAO;AACHC,QAAAA,GAAG,EAAE,KADF;AAEHC,QAAAA,CAAC,EAAEN,SAAS,CAACG,GAAD;AAFT,OAAP;AAIH;;AACD,QAAI,CAACN,WAAW,CAACM,GAAD,CAAhB,EAAuB;AACnB,YAAM,IAAII,SAAJ,CAAcT,eAAe,CAACK,GAAD,EAAM,GAAGF,KAAT,EAAgB,YAAhB,CAA7B,CAAN;AACH;;AACD,QAAI,CAACE,GAAG,CAACK,WAAT,EAAsB;AAClB,YAAM,IAAID,SAAJ,CAAc,uDAAd,CAAN;AACH;;AACD,UAAM;AAAEE,MAAAA,GAAF;AAAOC,MAAAA,OAAP;AAAgBC,MAAAA,GAAhB;AAAqBC,MAAAA,GAArB;AAA0B,SAAGC;AAA7B,cAA2CjB,MAAM,CAACkB,MAAP,CAAcC,SAAd,CAAwB,KAAxB,EAA+BZ,GAA/B,CAAjD;AACA,WAAOU,GAAP;AACH,GAfa;;AAAA,kBAARX,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAgBA,eAAeA,QAAf","sourcesContent":["import crypto, { isCryptoKey } from './webcrypto.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { encode as base64url } from './base64url.js';\nimport { types } from './is_key_like.js';\nconst keyToJWK = async (key) => {\n    if (key instanceof Uint8Array) {\n        return {\n            kty: 'oct',\n            k: base64url(key),\n        };\n    }\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n    }\n    if (!key.extractable) {\n        throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');\n    }\n    const { ext, key_ops, alg, use, ...jwk } = await crypto.subtle.exportKey('jwk', key);\n    return jwk;\n};\nexport default keyToJWK;\n"]},"metadata":{},"sourceType":"module"}