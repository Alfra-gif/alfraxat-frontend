{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { concat, uint64be } from '../lib/buffer_utils.js';\nimport checkIvLength from '../lib/check_iv_length.js';\nimport checkCekLength from './check_cek_length.js';\nimport timingSafeEqual from './timing_safe_equal.js';\nimport { JOSENotSupported, JWEDecryptionFailed } from '../util/errors.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\n\nfunction cbcDecrypt(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _cbcDecrypt.apply(this, arguments);\n}\n\nfunction _cbcDecrypt() {\n  _cbcDecrypt = _asyncToGenerator(function* (enc, cek, ciphertext, iv, tag, aad) {\n    if (!(cek instanceof Uint8Array)) {\n      throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));\n    }\n\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const encKey = yield crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);\n    const macKey = yield crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {\n      hash: `SHA-${keySize << 1}`,\n      name: 'HMAC'\n    }, false, ['sign']);\n    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));\n    const expectedTag = new Uint8Array((yield crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));\n    let macCheckPassed;\n\n    try {\n      macCheckPassed = timingSafeEqual(tag, expectedTag);\n    } catch (_a) {}\n\n    if (!macCheckPassed) {\n      throw new JWEDecryptionFailed();\n    }\n\n    let plaintext;\n\n    try {\n      plaintext = new Uint8Array(yield crypto.subtle.decrypt({\n        iv,\n        name: 'AES-CBC'\n      }, encKey, ciphertext));\n    } catch (_b) {}\n\n    if (!plaintext) {\n      throw new JWEDecryptionFailed();\n    }\n\n    return plaintext;\n  });\n  return _cbcDecrypt.apply(this, arguments);\n}\n\nfunction gcmDecrypt(_x7, _x8, _x9, _x10, _x11, _x12) {\n  return _gcmDecrypt.apply(this, arguments);\n}\n\nfunction _gcmDecrypt() {\n  _gcmDecrypt = _asyncToGenerator(function* (enc, cek, ciphertext, iv, tag, aad) {\n    let encKey;\n\n    if (cek instanceof Uint8Array) {\n      encKey = yield crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt']);\n    } else {\n      checkEncCryptoKey(cek, enc, 'decrypt');\n      encKey = cek;\n    }\n\n    try {\n      return new Uint8Array(yield crypto.subtle.decrypt({\n        additionalData: aad,\n        iv,\n        name: 'AES-GCM',\n        tagLength: 128\n      }, encKey, concat(ciphertext, tag)));\n    } catch (_a) {\n      throw new JWEDecryptionFailed();\n    }\n  });\n  return _gcmDecrypt.apply(this, arguments);\n}\n\nconst decrypt = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (enc, cek, ciphertext, iv, tag, aad) {\n    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {\n      throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));\n    }\n\n    checkIvLength(enc, iv);\n\n    switch (enc) {\n      case 'A128CBC-HS256':\n      case 'A192CBC-HS384':\n      case 'A256CBC-HS512':\n        if (cek instanceof Uint8Array) checkCekLength(cek, parseInt(enc.slice(-3), 10));\n        return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);\n\n      case 'A128GCM':\n      case 'A192GCM':\n      case 'A256GCM':\n        if (cek instanceof Uint8Array) checkCekLength(cek, parseInt(enc.slice(1, 4), 10));\n        return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);\n\n      default:\n        throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n    }\n  });\n\n  return function decrypt(_x13, _x14, _x15, _x16, _x17, _x18) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default decrypt;","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/runtime/decrypt.js"],"names":["concat","uint64be","checkIvLength","checkCekLength","timingSafeEqual","JOSENotSupported","JWEDecryptionFailed","crypto","isCryptoKey","checkEncCryptoKey","invalidKeyInput","types","cbcDecrypt","enc","cek","ciphertext","iv","tag","aad","Uint8Array","TypeError","keySize","parseInt","slice","encKey","subtle","importKey","subarray","macKey","hash","name","macData","length","expectedTag","sign","macCheckPassed","_a","plaintext","decrypt","_b","gcmDecrypt","additionalData","tagLength"],"mappings":"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","sourcesContent":["import { concat, uint64be } from '../lib/buffer_utils.js';\nimport checkIvLength from '../lib/check_iv_length.js';\nimport checkCekLength from './check_cek_length.js';\nimport timingSafeEqual from './timing_safe_equal.js';\nimport { JOSENotSupported, JWEDecryptionFailed } from '../util/errors.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nasync function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n    if (!(cek instanceof Uint8Array)) {\n        throw new TypeError(invalidKeyInput(cek, 'Uint8Array'));\n    }\n    const keySize = parseInt(enc.slice(1, 4), 10);\n    const encKey = await crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);\n    const macKey = await crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {\n        hash: `SHA-${keySize << 1}`,\n        name: 'HMAC',\n    }, false, ['sign']);\n    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));\n    const expectedTag = new Uint8Array((await crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));\n    let macCheckPassed;\n    try {\n        macCheckPassed = timingSafeEqual(tag, expectedTag);\n    }\n    catch (_a) {\n    }\n    if (!macCheckPassed) {\n        throw new JWEDecryptionFailed();\n    }\n    let plaintext;\n    try {\n        plaintext = new Uint8Array(await crypto.subtle.decrypt({ iv, name: 'AES-CBC' }, encKey, ciphertext));\n    }\n    catch (_b) {\n    }\n    if (!plaintext) {\n        throw new JWEDecryptionFailed();\n    }\n    return plaintext;\n}\nasync function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n    let encKey;\n    if (cek instanceof Uint8Array) {\n        encKey = await crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt']);\n    }\n    else {\n        checkEncCryptoKey(cek, enc, 'decrypt');\n        encKey = cek;\n    }\n    try {\n        return new Uint8Array(await crypto.subtle.decrypt({\n            additionalData: aad,\n            iv,\n            name: 'AES-GCM',\n            tagLength: 128,\n        }, encKey, concat(ciphertext, tag)));\n    }\n    catch (_a) {\n        throw new JWEDecryptionFailed();\n    }\n}\nconst decrypt = async (enc, cek, ciphertext, iv, tag, aad) => {\n    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {\n        throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));\n    }\n    checkIvLength(enc, iv);\n    switch (enc) {\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            if (cek instanceof Uint8Array)\n                checkCekLength(cek, parseInt(enc.slice(-3), 10));\n            return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            if (cek instanceof Uint8Array)\n                checkCekLength(cek, parseInt(enc.slice(1, 4), 10));\n            return gcmDecrypt(enc, cek, ciphertext, iv, tag, aad);\n        default:\n            throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n    }\n};\nexport default decrypt;\n"]},"metadata":{},"sourceType":"module"}