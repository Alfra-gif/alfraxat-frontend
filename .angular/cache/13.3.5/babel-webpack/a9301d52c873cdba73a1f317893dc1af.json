{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';\nimport isObject from '../../lib/is_object.js';\nexport function generalVerify(_x, _x2, _x3) {\n  return _generalVerify.apply(this, arguments);\n}\n\nfunction _generalVerify() {\n  _generalVerify = _asyncToGenerator(function* (jws, key, options) {\n    if (!isObject(jws)) {\n      throw new JWSInvalid('General JWS must be an object');\n    }\n\n    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {\n      throw new JWSInvalid('JWS Signatures missing or incorrect type');\n    }\n\n    for (const signature of jws.signatures) {\n      try {\n        return yield flattenedVerify({\n          header: signature.header,\n          payload: jws.payload,\n          protected: signature.protected,\n          signature: signature.signature\n        }, key, options);\n      } catch (_a) {}\n    }\n\n    throw new JWSSignatureVerificationFailed();\n  });\n  return _generalVerify.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jws/general/verify.js"],"names":["flattenedVerify","JWSInvalid","JWSSignatureVerificationFailed","isObject","generalVerify","jws","key","options","Array","isArray","signatures","every","signature","header","payload","protected","_a"],"mappings":";AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,SAASC,UAAT,EAAqBC,8BAArB,QAA2D,sBAA3D;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,gBAAsBC,aAAtB;AAAA;AAAA;;;qCAAO,WAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,OAAvC,EAAgD;AACnD,QAAI,CAACJ,QAAQ,CAACE,GAAD,CAAb,EAAoB;AAChB,YAAM,IAAIJ,UAAJ,CAAe,+BAAf,CAAN;AACH;;AACD,QAAI,CAACO,KAAK,CAACC,OAAN,CAAcJ,GAAG,CAACK,UAAlB,CAAD,IAAkC,CAACL,GAAG,CAACK,UAAJ,CAAeC,KAAf,CAAqBR,QAArB,CAAvC,EAAuE;AACnE,YAAM,IAAIF,UAAJ,CAAe,0CAAf,CAAN;AACH;;AACD,SAAK,MAAMW,SAAX,IAAwBP,GAAG,CAACK,UAA5B,EAAwC;AACpC,UAAI;AACA,qBAAaV,eAAe,CAAC;AACzBa,UAAAA,MAAM,EAAED,SAAS,CAACC,MADO;AAEzBC,UAAAA,OAAO,EAAET,GAAG,CAACS,OAFY;AAGzBC,UAAAA,SAAS,EAAEH,SAAS,CAACG,SAHI;AAIzBH,UAAAA,SAAS,EAAEA,SAAS,CAACA;AAJI,SAAD,EAKzBN,GALyB,EAKpBC,OALoB,CAA5B;AAMH,OAPD,CAQA,OAAOS,EAAP,EAAW,CACV;AACJ;;AACD,UAAM,IAAId,8BAAJ,EAAN;AACH,G","sourcesContent":["import { flattenedVerify } from '../flattened/verify.js';\nimport { JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';\nimport isObject from '../../lib/is_object.js';\nexport async function generalVerify(jws, key, options) {\n    if (!isObject(jws)) {\n        throw new JWSInvalid('General JWS must be an object');\n    }\n    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {\n        throw new JWSInvalid('JWS Signatures missing or incorrect type');\n    }\n    for (const signature of jws.signatures) {\n        try {\n            return await flattenedVerify({\n                header: signature.header,\n                payload: jws.payload,\n                protected: signature.protected,\n                signature: signature.signature,\n            }, key, options);\n        }\n        catch (_a) {\n        }\n    }\n    throw new JWSSignatureVerificationFailed();\n}\n"]},"metadata":{},"sourceType":"module"}