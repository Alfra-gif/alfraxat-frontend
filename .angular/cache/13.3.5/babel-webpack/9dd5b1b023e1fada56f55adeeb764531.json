{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FlattenedEncrypt } from '../flattened/encrypt.js';\nexport class CompactEncrypt {\n  constructor(plaintext) {\n    this._flattened = new FlattenedEncrypt(plaintext);\n  }\n\n  setContentEncryptionKey(cek) {\n    this._flattened.setContentEncryptionKey(cek);\n\n    return this;\n  }\n\n  setInitializationVector(iv) {\n    this._flattened.setInitializationVector(iv);\n\n    return this;\n  }\n\n  setProtectedHeader(protectedHeader) {\n    this._flattened.setProtectedHeader(protectedHeader);\n\n    return this;\n  }\n\n  setKeyManagementParameters(parameters) {\n    this._flattened.setKeyManagementParameters(parameters);\n\n    return this;\n  }\n\n  encrypt(key, options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const jwe = yield _this._flattened.encrypt(key, options);\n      return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');\n    })();\n  }\n\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/jwe/compact/encrypt.js"],"names":["FlattenedEncrypt","CompactEncrypt","constructor","plaintext","_flattened","setContentEncryptionKey","cek","setInitializationVector","iv","setProtectedHeader","protectedHeader","setKeyManagementParameters","parameters","encrypt","key","options","jwe","protected","encrypted_key","ciphertext","tag","join"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,yBAAjC;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKC,UAAL,GAAkB,IAAIJ,gBAAJ,CAAqBG,SAArB,CAAlB;AACH;;AACDE,EAAAA,uBAAuB,CAACC,GAAD,EAAM;AACzB,SAAKF,UAAL,CAAgBC,uBAAhB,CAAwCC,GAAxC;;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,uBAAuB,CAACC,EAAD,EAAK;AACxB,SAAKJ,UAAL,CAAgBG,uBAAhB,CAAwCC,EAAxC;;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,kBAAkB,CAACC,eAAD,EAAkB;AAChC,SAAKN,UAAL,CAAgBK,kBAAhB,CAAmCC,eAAnC;;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,0BAA0B,CAACC,UAAD,EAAa;AACnC,SAAKR,UAAL,CAAgBO,0BAAhB,CAA2CC,UAA3C;;AACA,WAAO,IAAP;AACH;;AACKC,EAAAA,OAAO,CAACC,GAAD,EAAMC,OAAN,EAAe;AAAA;;AAAA;AACxB,YAAMC,GAAG,SAAS,KAAI,CAACZ,UAAL,CAAgBS,OAAhB,CAAwBC,GAAxB,EAA6BC,OAA7B,CAAlB;AACA,aAAO,CAACC,GAAG,CAACC,SAAL,EAAgBD,GAAG,CAACE,aAApB,EAAmCF,GAAG,CAACR,EAAvC,EAA2CQ,GAAG,CAACG,UAA/C,EAA2DH,GAAG,CAACI,GAA/D,EAAoEC,IAApE,CAAyE,GAAzE,CAAP;AAFwB;AAG3B;;AAvBuB","sourcesContent":["import { FlattenedEncrypt } from '../flattened/encrypt.js';\nexport class CompactEncrypt {\n    constructor(plaintext) {\n        this._flattened = new FlattenedEncrypt(plaintext);\n    }\n    setContentEncryptionKey(cek) {\n        this._flattened.setContentEncryptionKey(cek);\n        return this;\n    }\n    setInitializationVector(iv) {\n        this._flattened.setInitializationVector(iv);\n        return this;\n    }\n    setProtectedHeader(protectedHeader) {\n        this._flattened.setProtectedHeader(protectedHeader);\n        return this;\n    }\n    setKeyManagementParameters(parameters) {\n        this._flattened.setKeyManagementParameters(parameters);\n        return this;\n    }\n    async encrypt(key, options) {\n        const jwe = await this._flattened.encrypt(key, options);\n        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}