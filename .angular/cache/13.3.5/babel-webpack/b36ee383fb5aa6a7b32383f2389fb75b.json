{"ast":null,"code":"import _asyncToGenerator from \"/home/ramon/Desktop/Institut Lacet\\xE0nia/S\\xEDntesi/Projecte/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport encrypt from '../runtime/encrypt.js';\nimport decrypt from '../runtime/decrypt.js';\nimport generateIv from './iv.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nexport function wrap(_x, _x2, _x3, _x4) {\n  return _wrap.apply(this, arguments);\n}\n\nfunction _wrap() {\n  _wrap = _asyncToGenerator(function* (alg, key, cek, iv) {\n    const jweAlgorithm = alg.slice(0, 7);\n    iv || (iv = generateIv(jweAlgorithm));\n    const {\n      ciphertext: encryptedKey,\n      tag\n    } = yield encrypt(jweAlgorithm, cek, key, iv, new Uint8Array(0));\n    return {\n      encryptedKey,\n      iv: base64url(iv),\n      tag: base64url(tag)\n    };\n  });\n  return _wrap.apply(this, arguments);\n}\n\nexport function unwrap(_x5, _x6, _x7, _x8, _x9) {\n  return _unwrap.apply(this, arguments);\n}\n\nfunction _unwrap() {\n  _unwrap = _asyncToGenerator(function* (alg, key, encryptedKey, iv, tag) {\n    const jweAlgorithm = alg.slice(0, 7);\n    return decrypt(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));\n  });\n  return _unwrap.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/ramon/Desktop/Institut Lacetània/Síntesi/Projecte/node_modules/jose/dist/browser/lib/aesgcmkw.js"],"names":["encrypt","decrypt","generateIv","encode","base64url","wrap","alg","key","cek","iv","jweAlgorithm","slice","ciphertext","encryptedKey","tag","Uint8Array","unwrap"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,UAAP,MAAuB,SAAvB;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,yBAApC;AACA,gBAAsBC,IAAtB;AAAA;AAAA;;;4BAAO,WAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,EAAnC,EAAuC;AAC1C,UAAMC,YAAY,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAa,CAAb,CAArB;AACAF,IAAAA,EAAE,KAAKA,EAAE,GAAGP,UAAU,CAACQ,YAAD,CAApB,CAAF;AACA,UAAM;AAAEE,MAAAA,UAAU,EAAEC,YAAd;AAA4BC,MAAAA;AAA5B,cAA0Cd,OAAO,CAACU,YAAD,EAAeF,GAAf,EAAoBD,GAApB,EAAyBE,EAAzB,EAA6B,IAAIM,UAAJ,CAAe,CAAf,CAA7B,CAAvD;AACA,WAAO;AAAEF,MAAAA,YAAF;AAAgBJ,MAAAA,EAAE,EAAEL,SAAS,CAACK,EAAD,CAA7B;AAAmCK,MAAAA,GAAG,EAAEV,SAAS,CAACU,GAAD;AAAjD,KAAP;AACH,G;;;;AACD,gBAAsBE,MAAtB;AAAA;AAAA;;;8BAAO,WAAsBV,GAAtB,EAA2BC,GAA3B,EAAgCM,YAAhC,EAA8CJ,EAA9C,EAAkDK,GAAlD,EAAuD;AAC1D,UAAMJ,YAAY,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAa,CAAb,CAArB;AACA,WAAOV,OAAO,CAACS,YAAD,EAAeH,GAAf,EAAoBM,YAApB,EAAkCJ,EAAlC,EAAsCK,GAAtC,EAA2C,IAAIC,UAAJ,CAAe,CAAf,CAA3C,CAAd;AACH,G","sourcesContent":["import encrypt from '../runtime/encrypt.js';\nimport decrypt from '../runtime/decrypt.js';\nimport generateIv from './iv.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nexport async function wrap(alg, key, cek, iv) {\n    const jweAlgorithm = alg.slice(0, 7);\n    iv || (iv = generateIv(jweAlgorithm));\n    const { ciphertext: encryptedKey, tag } = await encrypt(jweAlgorithm, cek, key, iv, new Uint8Array(0));\n    return { encryptedKey, iv: base64url(iv), tag: base64url(tag) };\n}\nexport async function unwrap(alg, key, encryptedKey, iv, tag) {\n    const jweAlgorithm = alg.slice(0, 7);\n    return decrypt(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));\n}\n"]},"metadata":{},"sourceType":"module"}